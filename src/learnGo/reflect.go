package main

import (
	"fmt"
	"reflect"
	"time"
)

type Talk interface {
	Say()
}

type User struct {
	Username string `json:username customTag:test`
	UserId   int
}

func (user User) Say() {
	fmt.Println("user say something..,form:" + user.Username)
}

func main() {
	t1 := time.Now().Unix()
	fmt.Println(reflect.TypeOf(t1))

	fmt.Println("-----")
	t2 := time.Duration(time.Now().Unix())
	fmt.Println(t2)
	// var t2 int
	// t2 = time.Now().Unix()
	// fmt.Println(reflect.TypeOf(t2))

	fmt.Println("object reflect..")

	var u1 Talk = new(User)
	fmt.Println(reflect.TypeOf(u1))

	fmt.Println("------------接口断言-------------------")
	//接口断言
	if _, ok := u1.(Talk); ok {
		fmt.Println("u1 implements the interface Talk")
	}
	fmt.Println("------------接口断言-------------------")

	fmt.Println("------------类型断言-------------------")
	//类型断言
	switch v := u1.(type) {
	case User:
		fmt.Println(v)
		fmt.Println("u1 is instanceof User")
	default:
		fmt.Println(reflect.TypeOf(v))
		fmt.Println("default")
	}
	fmt.Println("------------类型断言-------------------")

	user := &User{UserId: 1, Username: "songgl"}
	user.Say()
	fmt.Println(reflect.TypeOf(user))

	var u Talk
	u = user //接口赋值
	u.Say()
	fmt.Println(reflect.TypeOf(u))

	du := user
	du.Say()
	fmt.Println(reflect.TypeOf(du))

	fmt.Println(reflect.TypeOf(user).Elem().Field(0))

	fmt.Println(reflect.TypeOf(user).Elem().Field(0).Tag)

	type AutoGenerated struct {
		Data struct {
			User struct {
				UserID   int    `json:"userId"`
				Username string `json:"username"`
			} `json:"user"`
		} `json:"data"`
	}

	fmt.Println(reflect.TypeOf(new(AutoGenerated)).Elem().Field(0))

	fmt.Println(reflect.TypeOf(new(AutoGenerated)).Elem().Field(0).Type)
}
